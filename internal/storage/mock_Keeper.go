// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package storage

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/wurt83ow/tinyurl/internal/models"
)

// MockKeeper is an autogenerated mock type for the Keeper type
type MockKeeper struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MockKeeper) Close() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetUsersAndURLsCount provides a mock function with given fields:
func (_m *MockKeeper) GetUsersAndURLsCount() (int, int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Load provides a mock function with given fields:
func (_m *MockKeeper) Load() (map[string]models.DataURL, error) {
	ret := _m.Called()

	var r0 map[string]models.DataURL
	if rf, ok := ret.Get(0).(func() map[string]models.DataURL); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.DataURL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadUsers provides a mock function with given fields:
func (_m *MockKeeper) LoadUsers() (map[string]models.DataUser, error) {
	ret := _m.Called()

	var r0 map[string]models.DataUser
	if rf, ok := ret.Get(0).(func() map[string]models.DataUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]models.DataUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ping provides a mock function with given fields:
func (_m *MockKeeper) Ping() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Save provides a mock function with given fields: _a0, _a1
func (_m *MockKeeper) Save(_a0 string, _a1 models.DataURL) (models.DataURL, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.DataURL
	if rf, ok := ret.Get(0).(func(string, models.DataURL) models.DataURL); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.DataURL)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, models.DataURL) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveBatch provides a mock function with given fields: _a0
func (_m *MockKeeper) SaveBatch(_a0 map[string]models.DataURL) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(map[string]models.DataURL) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUser provides a mock function with given fields: _a0, _a1
func (_m *MockKeeper) SaveUser(_a0 string, _a1 models.DataUser) (models.DataUser, error) {
	ret := _m.Called(_a0, _a1)

	var r0 models.DataUser
	if rf, ok := ret.Get(0).(func(string, models.DataUser) models.DataUser); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(models.DataUser)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, models.DataUser) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBatch provides a mock function with given fields: _a0
func (_m *MockKeeper) UpdateBatch(_a0 ...models.DeleteURL) error {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(...models.DeleteURL) error); ok {
		r0 = rf(_a0...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMockKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockKeeper creates a new instance of MockKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockKeeper(t mockConstructorTestingTNewMockKeeper) *MockKeeper {
	mock := &MockKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
